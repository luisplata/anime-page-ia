
name: Deploy Project On Production

on:
  workflow_dispatch: {}
  push:
    branches:
      - main

jobs:
  export-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      artifact_url: ${{ steps.generate_artifact.outputs.artifact_url }}
    steps:
      - name: 📥 Checkout del código
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Set Environment Variables
        run: |
          echo "VITE_ANIME_API_ENDPOINT=${{ secrets.VITE_API_BASE_URL }}" >> .env
          # Example: If you have another variable SECRET_KEY
          # echo "VITE_SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env

      - name: ⚙️ Construir la aplicación
        run: npm run build

      - name: 🔍 Verificar si la carpeta build existe (now 'dist')
        run: ls -la dist

      - name: 🗜️ Comprimir el build
        run: |
          cd dist
          zip -r ../build.zip .

      - name: Validate build.zip
        run: |
          echo "Listing contents of dist directory:"
          ls -la dist
          echo "Checking build.zip:"
          ls -la build.zip || echo "build.zip not found!"

      - name: 📤 Guardar el ZIP como artefacto
        uses: actions/upload-artifact@v4
        id: upload_artifact
        with:
          name: project-build
          path: build.zip

      - name: Generate Artifact URL
        id: generate_artifact
        run: |
          echo "artifact_url=https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ steps.upload_artifact.outputs.artifact-id }}/zip" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: export-and-deploy
    steps:
      - name: 📥 Descargar el artefacto
        uses: actions/download-artifact@v4
        with:
          name: project-build
          path: .

      - name: 🚀 Subir al servidor por SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "build.zip"
          target: "/home/${{ secrets.SSH_USER }}"

      - name: 🔧 Conectar por SSH y desplegar
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            APP_DIR="${HOME}/${{ secrets.APP_DIR }}"
            ARTIFACT_URL="${{ needs.export-and-deploy.outputs.artifact_url }}"
            TEMP_ZIP_PATH="/home/${{ secrets.SSH_USER }}/build.zip" # Path where scp copied the file

            # Limpiar el directorio si existe
            if [ -d "$APP_DIR" ]; then
              echo "Cleaning APP_DIR..."
              rm -rf "${APP_DIR:?}/*"
            else
              echo "Creating APP_DIR..."
              mkdir -p "$APP_DIR"
            fi

            # Verificar si el archivo ZIP existe en el servidor
            if [ ! -f "$TEMP_ZIP_PATH" ]; then
              echo "build.zip not found at $TEMP_ZIP_PATH on server. Downloading from artifact URL as fallback (if configured)."
              # Fallback: Intenta descargar directamente si la URL del artefacto es accesible y GITHUB_TOKEN tiene permisos
              # Esto puede ser útil si el scp-action tiene problemas o para verificar
              # Nota: GITHUB_TOKEN podría no tener permisos para acceder a artefactos de esta manera en todos los contextos.
              # Asegúrate que el token tiene `actions:read`
              # Este es un paso de contingencia y puede que no funcione en todos los setups.
              # Se recomienda que `appleboy/scp-action` sea el método primario.
              # curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              #  -H "Accept: application/vnd.github.v3+json" \
              #  "$ARTIFACT_URL" -o "$TEMP_ZIP_PATH"
              # if [ $? -ne 0 ]; then
              #   echo "Failed to download artifact via curl."
              #   exit 1
              # fi
              echo "SCP action should have placed build.zip. If not, check scp-action logs."
              exit 1
            fi

            # Descomprimir el archivo en APP_DIR
            echo "Extracting ZIP from $TEMP_ZIP_PATH..."
            unzip -o "$TEMP_ZIP_PATH" -d "$APP_DIR"

            # Eliminar el ZIP después de descomprimir
            echo "Deleting ZIP $TEMP_ZIP_PATH..."
            rm -f "$TEMP_ZIP_PATH"
            
            echo "Deployment finished!"
